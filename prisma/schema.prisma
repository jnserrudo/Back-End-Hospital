generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Definición del modelo de Roles
model Rol {
  id      Int       @id @default(autoincrement())
  rol     String
  usuario Usuario[]
}


// Definición del modelo de Usuarios
model Usuario {
  id         Int       @id @default(autoincrement())
  usuario    String    @default("")
  dni        Int       @default(0)
  email      String    @default("")
  nombre     String
  blanqueado Int       @default(0)
  detalle    String    @default("")
  apellido   String    @default("")
  password   String // Aquí almacenamos la contraseña, que debería ser encriptada en el backend
  rol        Rol?    @relation(fields: [idRol], references: [id])
  idRol      Int?
  paciente   Paciente?
}
// Definición del modelo de Recetas
model Receta {
  id           Int    @id @default(autoincrement())
  nombre       String
  porciones    String
  calorias     String
  tiempo       String
  urlFoto      String
  ingredientes String
  preparacion  String

  tipsSaludables        String  @default("")
  composicionNutricional String  @default("")

  patologia PatologiaReceta[]
}

// Definición del modelo de Pacientes
model Paciente {
  id        Int      @id @default(autoincrement())


  legajo                     String?            // Campo opcional
  fichaRegistro              String?            // Campo opcional
  fichaSalud                 String?            // Campo opcional
  resultadosEstudios         String?            // Campo opcional
  informes                   String?            // Campo opcional
  seguimiento                String?            // Campo opcional
  diariosIngesta             String?            // Campo opcional
  diariosActividadFisica     String?            // Campo opcional
  registroFotografico        String?            // Campo opcional
  indicacionesPrescripciones String?            // Campo opcional


  idUsuario Int?  @unique // Nueva columna para la relación con Usuario
  usuario   Usuario? @relation(fields: [idUsuario], references: [id]) // Relación uno a uno con Usuario

  patologia PatologiaPaciente[]
}

// Definición del modelo de Patologias
model Patologia {
  id          Int                    @id @default(autoincrement())
  nombre      String
  descripcion String
  paciente    PatologiaPaciente[]
  recetas     PatologiaReceta[]
  informacion PatologiaInformacion[]
  ejercicio   PatologiaEjercicio[]
}

model Ejercicio {
  id          Int                  @id @default(autoincrement())
  nombre      String
  descripcion String
  patologia   PatologiaEjercicio[]
}

// Definición de la entidad de unión PatologiaPaciente
model PatologiaPaciente {
  id          Int       @id @default(autoincrement())
  paciente    Paciente  @relation(fields: [pacienteId], references: [id])
  pacienteId  Int
  patologia   Patologia @relation(fields: [patologiaId], references: [id])
  patologiaId Int
}

model PatologiaReceta {
  id          Int       @id @default(autoincrement())
  receta      Receta    @relation(fields: [recetaId], references: [id])
  recetaId    Int
  patologia   Patologia @relation(fields: [patologiaId], references: [id])
  patologiaId Int
}

model PatologiaInformacion {
  id            Int         @id @default(autoincrement())
  informacion   Informacion @relation(fields: [informacionId], references: [id])
  informacionId Int
  patologia     Patologia   @relation(fields: [patologiaId], references: [id])
  patologiaId   Int
}

model PatologiaEjercicio {
  id          Int       @id @default(autoincrement())
  ejercicio   Ejercicio @relation(fields: [ejercicioId], references: [id])
  ejercicioId Int
  patologia   Patologia @relation(fields: [patologiaId], references: [id])
  patologiaId Int
}

// Definición del modelo de Informacion
model Informacion {
  id        Int                    @id @default(autoincrement())
  nombre    String
  url       String
  patologia PatologiaInformacion[]
}
